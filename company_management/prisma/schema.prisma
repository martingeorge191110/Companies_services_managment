generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admins {
  id            String     @id @default(uuid())
  f_n           String
  l_n           String
  email         String     @unique
  phone_number  String
  password      String
  con_pass      String
  no_wrong_pass Int        @default(0) // When the User try to sign in more than one time
  last_login    DateTime
  role          AdminRoles
}

enum AdminRoles {
  Admin
  Service
}

model Companies {
  id                      String                @id @default(uuid())
  name                    String
  avatar                  String?
  registration_number     String?
  business_type           BusinessCategory
  specialize              String?
  email                   String                @unique
  phone_number            String
  address                 String?
  currency                String?
  fiscal_year             String?
  started_date            DateTime?
  active_permission       Boolean               @default(false)
  purchased_system        Boolean               @default(false)
  amount_paid             Float                 @default(0)
  valid_account           Boolean               @default(false)
  months_of_subiscription Int                   @default(0)
  account_exp_date        DateTime?
  agents                  Companies_Agents[]    @relation("companyAgent")
  employees               Companies_Employees[] @relation("companyEmployee")
  investors               Investors_Companies[] @relation("companiesInvested")
  created_at              DateTime              @default(now())
  updated_at              DateTime              @updatedAt
}

enum BusinessCategory {
  Accounting
  Finance
  Retail
  Manufacturing
  Healthcare
  Technology
  Education
  Hospitality
  Transportation
}

model Users {
  id                 String                @id @default(uuid())
  f_n                String
  l_n                String
  email              String                @unique
  password           String
  con_pass           String
  phone_number       String?               @unique
  avatar             String?
  last_login         DateTime?
  is_online          Boolean               @default(false)
  role               String?
  monthly_income     Float?
  monthly_tax        Float?
  mail_notifications Boolean               @default(true)
  company_agent      Companies_Agents[]    @relation("companyAgent")
  company_employee   Companies_Employees[] @relation("companyEmployee")
  investor           Investors?            @relation("investor")
  active_account     Boolean               @default(true)
  profile_complete   Boolean               @default(false)
  created_at         DateTime              @default(now())
  updated_at         DateTime              @updatedAt
}

model Companies_Agents {
  agent_id   String
  company_id String
  agent      Users     @relation("companyAgent", fields: [agent_id], references: [id], onUpdate: Cascade)
  company    Companies @relation("companyAgent", fields: [company_id], references: [id], onUpdate: Cascade)

  admin               Boolean   @default(false)
  assigned_role       String
  start_date          DateTime?
  end_date            DateTime?
  relationship_status String // the main admin of the company will determine who has the full authorization and who hasnot
  notes               String?
  salary              Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([agent_id, company_id], map: "agents_companies_ids")
}

model Companies_Employees {
  employee_id String
  company_id  String
  agent       Users     @relation("companyEmployee", fields: [employee_id], references: [id], onUpdate: Cascade)
  company     Companies @relation("companyEmployee", fields: [company_id], references: [id], onUpdate: Cascade)

  role            String
  start_date      DateTime?
  end_date        DateTime?
  status          Employees_Status         @default(Active)
  access_level    String? // Level of Authorization
  department      String?
  location        String?
  salary          Float?
  bonus           Float?
  contract_type   Employees_Contract_Type?
  rating          Int?
  notes           String                   @db.VarChar(1024)
  holidays        Int?
  taken_holidays  Int?
  deducted_amount Float                    @default(0)
  created_at      DateTime                 @default(now())
  updated_at      DateTime                 @updatedAt

  @@unique([employee_id, company_id], map: "employees_companies_ids")
}

model Investors {
  user_id             String                @unique
  investment_focus    String?
  country             String
  city                String
  funding_amount      Float?
  inveseted_companies Investors_Companies[] @relation("invesetedCompanies")
  user_account        Users                 @relation("investor", fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Investors_Companies {
  investor_id         String
  company_id          String
  started_date        DateTime
  investing_amount    Float
  investment_type     Investment_Types
  investor_percentage Float
  active              Boolean          @default(true)

  investor Investors @relation("invesetedCompanies", fields: [investor_id], references: [user_id], onUpdate: Cascade)
  company  Companies @relation("companiesInvested", fields: [company_id], references: [id], onUpdate: Cascade)

  @@unique([investor_id, company_id], map: "investor_company_ids")
}

enum Investment_Types {
  Equity
  Debt
  ConvertibleDebt
}

enum Employees_Status {
  Active
  InActive
  Susbended
}

enum Employees_Contract_Type {
  FullTime
  PartTime
}
